/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Toggle1 {
            bindings = <&tog 1>;
            key-positions = <36 37>;
        };

        Toggle2 {
            bindings = <&tog 2>;
            key-positions = <41 40>;
        };
    };

    behaviors {
        HMR_R: HMR_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <500>;
            hold-trigger-key-positions = <13 14 15 16 0 1 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 2 3 4 5 39 40 41>;
            hold-trigger-on-release;
        };

        HMR_L: HMR_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <500>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 8 36 37 38>;
        };

        MultiShift: MultiShift {
            compatible = "zmk,behavior-mod-morph";
            label = "MULTISHIFT";
            bindings = <&StickyShiftRelease LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        StickyShiftRelease: StickyShiftRelease {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKYSHIFTRELEASE";
            bindings = <&sk>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <2000>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp TAB    &kp Q           &kp W              &kp F              &kp P                &kp B        &kp J    &kp L                 &kp U               &kp Y               &kp SEMICOLON   &kp BSPC
&kp LCTRL  &HMR_L LCTRL A  &HMR_L LEFT_ALT R  &HMR_L LEFT_GUI S  &HMR_L LEFT_SHIFT T  &kp G        &kp M    &HMR_R RIGHT_SHIFT N  &HMR_R RIGHT_GUI E  &HMR_R RIGHT_ALT I  &HMR_R RCTRL O  &kp SQT
&kp LSHFT  &kp Z           &kp X              &kp C              &kp D                &kp V        &kp K    &kp H                 &kp COMMA           &kp DOT             &kp FSLH        &kp ESC
                                              &kp LGUI           &mo 1                &kp SPACE    &kp RET  &MultiShift           &mo 2
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6         &kp N7           &kp N8    &kp N9     &kp N0             &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LC(LS(S))  &kp PRINTSCREEN  &kp UP    &trans     &kp LESS_THAN      &kp GREATER_THAN
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &kp LC(HOME)   &kp LEFT         &kp DOWN  &kp RIGHT  &kp LS(LESS_THAN)  &kp LS(GREATER_THAN)
                                        &kp LGUI      &trans        &kp SPACE       &kp RET        &trans           &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Raise";
            bindings = <
&kp TAB    &kp EXCL      &kp AT  &kp HASH  &kp DLLR  &kp PRCNT            &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &kp QUESTION  &trans  &trans    &trans    &kp DOUBLE_QUOTES    &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans        &trans  &trans    &trans    &trans               &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                                 &kp LGUI  &trans    &kp SPACE            &kp RET    &trans     &kp RALT
            >;
        };

        extra_1 { status = "reserved"; };

        extra_2 { status = "reserved"; };

        extra_3 { status = "reserved"; };
    };
};
